# Production deployment using GHCR images
# Usage: docker compose -f docker-compose.prod.yml up -d

services:
  postgres:
    image: postgres:15-alpine
    container_name: process-mining-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .data/postgres/:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - process-mining-network
    restart: unless-stopped

  backend:
    image: ghcr.io/suwa-sh/open-process-mining-backend:latest
    container_name: process-mining-backend
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./dbt:/app/dbt
    networks:
      - process-mining-network
    restart: unless-stopped

  frontend:
    image: ghcr.io/suwa-sh/open-process-mining-frontend:latest
    container_name: process-mining-frontend
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000}
    ports:
      - "5173:5173"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - process-mining-network
    restart: unless-stopped

networks:
  process-mining-network:
    driver: bridge
