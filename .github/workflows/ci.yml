name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: process_mining
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: process_mining_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        working-directory: ./backend
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: process_mining
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: process_mining_db
        run: |
          PYTHONPATH=/home/runner/work/open-process-mining/open-process-mining/backend pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  lint:
    name: Lint and Format Check (qlty)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install qlty
        run: |
          curl -fsSL https://qlty.sh | bash
          echo "$HOME/.qlty/bin" >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run qlty check
        run: qlty check || true

  sqlfluff:
    name: SQL Linting (sqlfluff)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install sqlfluff
        run: pip install sqlfluff

      - name: Lint SQL files
        run: |
          sqlfluff lint backend/sql/ --dialect postgres --format github-annotation || true
          sqlfluff lint dbt/models/ --dialect postgres --config .sqlfluff --format github-annotation || true

  dbt-test:
    name: dbt Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: process_mining
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: process_mining_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dbt and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core dbt-postgres

      - name: Generate sample data
        run: |
          cd scripts
          pip install pandas
          python generate_sample_data.py

      - name: Run dbt
        working-directory: ./dbt
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: process_mining
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: process_mining_db
        run: |
          dbt deps
          dbt seed
          dbt run
          dbt test

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: open-process-mining-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: open-process-mining-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
